# Makefile for a robust SLURM-aware ML workflow on high-latency filesystems

SOURCE_TYPE := F16
IMATRICES := wi-imat no-imat

# --- ZFP

MODES_ZFP := rate prec acc
DIMS := 1 2 3 4

# --- Native

MODES_NATIVE := native

# --- Paths
ROOT_DIR := $(shell pwd)/../
SOURCE_DIR := $(shell pwd)/../llama.cpp
SCRIPT_DIR := $(shell pwd)
INSTALL_DIR :=  $(shell pwd)/../llama.cpp-cpu

COMPILE_PARAMS_ZFP := $(shell echo $(foreach z,$(MODES_ZFP),\
								 $(foreach d,$(DIMS),\
								 $(foreach i,$(IMATRICES),\
								 $(z)_$(d)_$(i)))) | tr ' ' '\n' | sort | uniq)

COMPILE_PARAMS_NATIVE := $(shell echo $(foreach z,$(MODES_NATIVE),\
								 $(z)_NULL_NULL) | tr ' ' '\n' | sort | uniq)	

COMPILE_PARAMS := $(COMPILE_PARAMS_ZFP) $(COMPILE_PARAMS_NATIVE)
						
# Final step targets
COMPILE_DONE := $(addprefix output/compile_, $(addsuffix .done, $(COMPILE_PARAMS)))

.PHONY: all clean

all: compile

compile: $(COMPILE_DONE)

# Helper Functions
zfp_value = $(if $(findstring native,$(1)),OFF,ON)
imatrix_value = $(if $(findstring no-imat,$(1)),OFF,ON)
get_field = $(word $(2),$(subst _, ,$(1)))

# Step 1: Compile
$(ROOT_DIR)/job_results/compilation/compile_%.done:
	cd $(SCRIPT_DIR)
	mkdir -p job_logs/compilation
	logfile=$(ROOT_DIR)/job_logs/compilation/compile_$*.log; \
	sbatch --wait \
		--job-name=compile_$* \
		--output=$$logfile \
		--cpus-per-task=8 --mem=20G --time=01:00:00 \
		--constraint=local_disk \
		--hint=multithread \
		--wrap="set -euo pipefail; \
			cd $(SOURCE_DIR); \
			module purge; \
			source $(ROOT_DIR)/source_env.cpp_cpu; \
			rm -rf /tmp/build_$*; \
			cmake \
				-B /tmp/build_$* \
				--install-prefix=$(INSTALL_DIR) \
				-DCMAKE_BUILD_TYPE=Release \
				-DBUILD_SHARED_LIBS=False \
				-DGGML_LTO=True \
				-DGGML_NATIVE=True \
				-DGGML_AVX512=ON \
				-DGGML_AVX512_VBMI=True \
				-DGGML_AVX512_VNNI=ON \
				-DGGML_AVX512_BF16=ON \
				-DBUILD_UTILITIES=OFF \
				-DZFP_WITH_OPENMP=OFF \
				-DCMAKE_C_FLAGS_RELEASE='  -O3 -march=native -fuse-ld=lld -mtune=native -flto=full -mprefer-vector-width=512 -g -gdwarf-4 -fno-omit-frame-pointer -fassociative-math -ffp-contract=fast -funsafe-math-optimizations -freciprocal-math -fno-signed-zeros -fvectorize' \
				-DCMAKE_CXX_FLAGS_RELEASE='-O3 -march=native -fuse-ld=lld -mtune=native -flto=full -mprefer-vector-width=512 -g -gdwarf-4 -fno-omit-frame-pointer -fassociative-math -ffp-contract=fast -funsafe-math-optimizations -freciprocal-math -fno-signed-zeros -fvectorize' \
				-DZFP_ENABLE_PIC=OFF \
				-DCMAKE_C_COMPILER=clang \
				-DCMAKE_CXX_COMPILER=clang++ \
				-DCMAKE_LINKER_TYPE=LLD \
				-DGGML_ZFP_ENABLE=$(call zfp_value,$*) \
				-DGGML_ZFP_MODE=$(call get_field,$*,1) \
				-DGGML_ZFP_DIMENSION=$(call get_field,$*,2) \
				-DGGML_ZFP_ENABLE_IMATRIX=$(call imatrix_value,$*) \
				--fresh; \
			make -C /tmp/build_$* -j 8;  \
			make -C /tmp/build_$* install; \
			touch $(ROOT_DIR)/job_results/compilation/compile_$*.done; \
			sync"
	echo "Successfully compiled '$*'"

